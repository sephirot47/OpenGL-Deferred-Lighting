#version 130	

uniform float time;
uniform float width, height;
uniform sampler2D renderedSceneTex;
uniform sampler2D depthSceneTex;
uniform sampler2D realTex;

float threshold = (0.001) * (1.0 + sin(time))/2.0  + 0.0005;

int toonFactor = 50;

in vec2 fragCoord;
vec2 pix = vec2((fragCoord.x+1.0)/2.0, (fragCoord.y+1.0)/2.0);

vec4 ToonColor(vec4 color)
{
	float r = (toonFactor * (int(color.x * 255.0) / toonFactor)) / 255.0; 
	float g = (toonFactor * (int(color.y * 255.0) / toonFactor)) / 255.0;
	float b = (toonFactor * (int(color.z * 255.0) / toonFactor)) / 255.0;
	return vec4(r, g, b, 1.0);
}

int IsEdge(float depth, float radius)
{
	for(float i = -radius; i <= radius; ++i)
	{
		for(float j = -radius; j <= radius; ++j)
		{
			float stepx = i/width, stepy = j/height;
			float neighbourDepth = texture(depthSceneTex, vec2(pix.x + stepx, pix.y + stepy)).x;
			if(abs(neighbourDepth - depth) > threshold) return 1;
		}
	}
	return 0;
}

void main()  
{  
    vec4 edgeColor = vec4(0.0, 0.0, 0.0, 1.0);
    vec4 bodyColor = vec4((sin(time)+1.0)/2.0, cos(sin((time)+1.0)/2.0), cos((time)+1.0)/2.0, 1.0);
    float depth = texture(depthSceneTex, pix).x;
    float radius = clamp(1.0, 1.0, 5.0);

    if(IsEdge(depth, radius) == 1) gl_FragColor = edgeColor;
    else if(depth < 0.999)
    {
	gl_FragColor = ToonColor(texture(renderedSceneTex, pix));
	gl_FragColor = texture(renderedSceneTex, pix);
    }
    else gl_FragColor = vec4(vec3(1.0, 1.0, 1.0) - bodyColor.xyz, 1.0);

    //gl_FragColor = texture(renderedSceneTex, pix);
}

